import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¢–æ–∫–µ–Ω –∏–∑ .env
TOKEN = os.getenv('BOT_TOKEN')

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã
def init_db():
    conn = sqlite3.connect('school_data.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS students (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        age INTEGER,
        grade TEXT
    )
    ''')
    conn.commit()
    conn.close()

# FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–≤–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class StudentForm(StatesGroup):
    name = State()
    age = State()
    grade = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(StudentForm.name)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@dp.message(StudentForm.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(StudentForm.age)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp.message(StudentForm.age)
async def get_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return
    await state.update_data(age=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:")
    await state.set_state(StudentForm.grade)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.message(StudentForm.grade)
async def get_grade(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_data['grade'] = message.text

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('school_data.db')
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO students (name, age, grade)
    VALUES (?, ?, ?)
    ''', (user_data['name'], user_data['age'], user_data['grade']))
    conn.commit()
    conn.close()

    await message.answer(
        f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n–ò–º—è: {user_data['name']}\n–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n–ö–ª–∞—Å—Å: {user_data['grade']}")
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /students - —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
@dp.message(Command("students"))
async def list_students(message: Message):
    conn = sqlite3.connect('school_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM students")
    students = cursor.fetchall()
    conn.close()

    if not students:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
        return

    response = "üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n"
    for student in students:
        response += f"{student[0]}. {student[1]}, –≤–æ–∑—Ä–∞—Å—Ç: {student[2]}, –∫–ª–∞—Å—Å: {student[3]}\n"

    await message.answer(response)

# –£–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –ø–æ ID
@dp.message(Command("delete"))
async def delete_student(message: Message):
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete [ID]")
        return

    student_id = int(args[1])

    conn = sqlite3.connect('school_data.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM students WHERE id = ?", (student_id,))
    conn.commit()
    deleted = cursor.rowcount
    conn.close()

    if deleted:
        await message.answer(f"‚úÖ –£—á–µ–Ω–∏–∫ —Å ID {student_id} —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer(f"‚ùå –£—á–µ–Ω–∏–∫ —Å ID {student_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
async def set_commands(bot: Bot):
    commands = [
        types.BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        types.BotCommand(command="/students", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤"),
        types.BotCommand(command="/delete", description="–£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ –ø–æ ID")
    ]
    await bot.set_my_commands(commands)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await set_commands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

    import pandas as pd


    def export_to_excel():
        conn = sqlite3.connect('school_data.db')
        query = "SELECT * FROM students"
        df = pd.read_sql_query(query, conn)
        conn.close()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        df.to_excel('students.xlsx', index=False)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ students.xlsx")


    if __name__ == "__main__":
        init_db()
        export_to_excel()  # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel