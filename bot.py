import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

bot = Bot(token=TOKEN)
dp = Dispatcher()

def init_db():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect('school_data.db') as conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS students (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                age INTEGER,
                grade TEXT
            )
        ''')

# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
class StudentForm(StatesGroup):
    name = State()
    age = State()
    grade = State()

# --- –ó–∞–¥–∞–Ω–∏–µ 1: –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ /start ---
@dp.message(CommandStart())
async def start_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–∏–≤–µ—Ç"), KeyboardButton(text="–ü–æ–∫–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message(lambda message: message.text in ["–ü—Ä–∏–≤–µ—Ç", "–ü–æ–∫–∞"])
async def handle_buttons(message: Message):
    if message.text == "–ü—Ä–∏–≤–µ—Ç":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!")
    elif message.text == "–ü–æ–∫–∞":
        await message.answer(f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {message.from_user.first_name}!")

# --- –ó–∞–¥–∞–Ω–∏–µ 2: –ö–Ω–æ–ø–∫–∏ —Å URL-—Å—Å—ã–ª–∫–∞–º–∏ /links ---
@dp.message(Command("links"))
async def send_links(message: Message):
    links = {
        "–ù–æ–≤–æ—Å—Ç–∏": "https://news.ycombinator.com/",
        "–ú—É–∑—ã–∫–∞": "https://spotify.com",
        "–í–∏–¥–µ–æ": "https://youtube.com"
    }
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, url=url)] for name, url in links.items()
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É:", reply_markup=keyboard)

# --- –ó–∞–¥–∞–Ω–∏–µ 3: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã /dynamic ---
@dp.message(Command("dynamic"))
async def dynamic_keyboard(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ", callback_data="show_more")]
    ])
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "show_more")
async def show_more_buttons(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø—Ü–∏—è 1", callback_data="option_1")],
        [InlineKeyboardButton(text="–û–ø—Ü–∏—è 2", callback_data="option_2")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data in ["option_1", "option_2"])
async def handle_option(callback: types.CallbackQuery):
    text = "–í—ã –≤—ã–±—Ä–∞–ª–∏: –û–ø—Ü–∏—è 1" if callback.data == "option_1" else "–í—ã –≤—ã–±—Ä–∞–ª–∏: –û–ø—Ü–∏—è 2"
    await callback.answer(text)
    await callback.message.edit_text(text)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add ---
@dp.message(Command("add"))
async def add_student_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentForm.name)

@dp.message(StudentForm.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —É—á–µ–Ω–∏–∫–∞ (—á–∏—Å–ª–æ–º):")
    await state.set_state(StudentForm.age)

@dp.message(StudentForm.age)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(age=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentForm.grade)

@dp.message(StudentForm.grade)
async def process_grade(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_data['grade'] = message.text

    with sqlite3.connect('school_data.db') as conn:
        conn.execute('''
            INSERT INTO students (name, age, grade)
            VALUES (?, ?, ?)
        ''', (user_data['name'], user_data['age'], user_data['grade']))

    await message.answer(f"‚úÖ –£—á–µ–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω:\n–ò–º—è: {user_data['name']}\n–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n–ö–ª–∞—Å—Å: {user_data['grade']}")
    await state.clear()

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ /students ---
@dp.message(Command("students"))
async def list_students(message: Message):
    with sqlite3.connect('school_data.db') as conn:
        cursor = conn.execute("SELECT * FROM students")
        students = cursor.fetchall()

    if not students:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
        return

    response = "üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n"
    for student in students:
        response += f"{student[0]}. {student[1]}, –≤–æ–∑—Ä–∞—Å—Ç: {student[2]}, –∫–ª–∞—Å—Å: {student[3]}\n"

    await message.answer(response)

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞ ---
async def set_commands(bot: Bot):
    commands = [
        types.BotCommand(command="/start", description="–ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"),
        types.BotCommand(command="/links", description="–ö–Ω–æ–ø–∫–∏ —Å URL-—Å—Å—ã–ª–∫–∞–º–∏"),
        types.BotCommand(command="/dynamic", description="–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é"),
        types.BotCommand(command="/add", description="–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞"),
        types.BotCommand(command="/students", description="–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤")
    ]
    await bot.set_my_commands(commands)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await set_commands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())