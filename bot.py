import sqlite3
import asyncio
import os
import requests
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
THE_CAT_API_KEY = os.getenv('THE_CAT_API_KEY')
NASA_API_KEY = os.getenv('NASA_API_KEY')

bot = Bot(token=TOKEN)
dp = Dispatcher()

def init_db():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect('school_data.db') as conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS students (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                age INTEGER,
                grade TEXT
            )
        ''')

# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
class StudentForm(StatesGroup):
    name = State()
    age = State()
    grade = State()

# FSM –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä–æ–¥–µ –∫–æ—à–∫–∏
class CatForm(StatesGroup):
    breed = State()

# --- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ---

# –ó–∞–¥–∞–Ω–∏–µ 1: –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ /start
@dp.message(CommandStart())
async def start_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–∏–≤–µ—Ç"), KeyboardButton(text="–ü–æ–∫–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message(lambda message: message.text in ["–ü—Ä–∏–≤–µ—Ç", "–ü–æ–∫–∞"])
async def handle_buttons(message: Message):
    if message.text == "–ü—Ä–∏–≤–µ—Ç":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!")
    elif message.text == "–ü–æ–∫–∞":
        await message.answer(f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {message.from_user.first_name}!")

# –ó–∞–¥–∞–Ω–∏–µ 2: –ö–Ω–æ–ø–∫–∏ —Å URL-—Å—Å—ã–ª–∫–∞–º–∏ /links
@dp.message(Command("links"))
async def send_links(message: Message):
    links = {
        "–ù–æ–≤–æ—Å—Ç–∏": "https://news.ycombinator.com/",
        "–ú—É–∑—ã–∫–∞": "https://spotify.com",
        "–í–∏–¥–µ–æ": "https://youtube.com"
    }
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, url=url)] for name, url in links.items()
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É:", reply_markup=keyboard)

# –ó–∞–¥–∞–Ω–∏–µ 3: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã /dynamic
@dp.message(Command("dynamic"))
async def dynamic_keyboard(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ", callback_data="show_more")]
    ])
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "show_more")
async def show_more_buttons(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø—Ü–∏—è 1", callback_data="option_1")],
        [InlineKeyboardButton(text="–û–ø—Ü–∏—è 2", callback_data="option_2")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data in ["option_1", "option_2"])
async def handle_option(callback: types.CallbackQuery):
    text = "–í—ã –≤—ã–±—Ä–∞–ª–∏: –û–ø—Ü–∏—è 1" if callback.data == "option_1" else "–í—ã –≤—ã–±—Ä–∞–ª–∏: –û–ø—Ü–∏—è 2"
    await callback.answer(text)
    await callback.message.edit_text(text)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add
@dp.message(Command("add"))
async def add_student_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentForm.name)

@dp.message(StudentForm.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —É—á–µ–Ω–∏–∫–∞ (—á–∏—Å–ª–æ–º):")
    await state.set_state(StudentForm.age)

@dp.message(StudentForm.age)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(age=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(StudentForm.grade)

@dp.message(StudentForm.grade)
async def process_grade(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_data['grade'] = message.text

    with sqlite3.connect('school_data.db') as conn:
        conn.execute('''
            INSERT INTO students (name, age, grade)
            VALUES (?, ?, ?)
        ''', (user_data['name'], user_data['age'], user_data['grade']))

    await message.answer(f"‚úÖ –£—á–µ–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω:\n–ò–º—è: {user_data['name']}\n–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n–ö–ª–∞—Å—Å: {user_data['grade']}")
    await state.clear()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ /students
@dp.message(Command("students"))
async def list_students(message: Message):
    with sqlite3.connect('school_data.db') as conn:
        cursor = conn.execute("SELECT * FROM students")
        students = cursor.fetchall()

    if not students:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
        return

    response = "üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n"
    for student in students:
        response += f"{student[0]}. {student[1]}, –≤–æ–∑—Ä–∞—Å—Ç: {student[2]}, –∫–ª–∞—Å—Å: {student[3]}\n"

    await message.answer(response)

# --- –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö API ---

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TheCatAPI
def get_cat_breeds():
    url = "https://api.thecatapi.com/v1/breeds"
    headers = {"x-api-key": THE_CAT_API_KEY}
    response = requests.get(url, headers=headers)
    return response.json()

def get_cat_image_by_breed(breed_id):
    url = f"https://api.thecatapi.com/v1/images/search?breed_ids={breed_id}"
    headers = {"x-api-key": THE_CAT_API_KEY}
    response = requests.get(url, headers=headers)
    data = response.json()
    if data:
        return data[0]['url']
    return None

def get_breed_info(breed_name):
    breeds = get_cat_breeds()
    for breed in breeds:
        if breed['name'].lower() == breed_name.lower():
            return breed
    return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cat –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä–æ–¥–µ –∫–æ—à–∫–∏
@dp.message(Command("cat"))
async def cat_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã –∫–æ—à–∫–∏:")
    await state.set_state(CatForm.breed)

@dp.message(CatForm.breed)
async def process_cat_breed(message: Message, state: FSMContext):
    breed_name = message.text
    breed_info = get_breed_info(breed_name)
    if breed_info:
        cat_image_url = get_cat_image_by_breed(breed_info['id'])
        info = (
            f"Breed: {breed_info['name']}\n"
            f"Origin: {breed_info['origin']}\n"
            f"Description: {breed_info['description']}\n"
            f"Temperament: {breed_info['temperament']}\n"
            f"Life Span: {breed_info['life_span']} years"
        )
        if cat_image_url:
            await message.answer_photo(photo=cat_image_url, caption=info)
        else:
            await message.answer(info)
    else:
        await message.answer("–ü–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç NASA (APOD)
def get_random_apod():
    end_date = datetime.now()
    start_date = end_date - timedelta(days=365)
    random_date = start_date + (end_date - start_date) * random.random()
    date_str = random_date.strftime("%Y-%m-%d")
    url = f'https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}&date={date_str}'
    response = requests.get(url)
    return response.json()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random_apod –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ—Ç–æ –æ—Ç NASA
@dp.message(Command("random_apod"))
async def random_apod_handler(message: Message):
    apod = get_random_apod()
    if 'url' in apod and 'title' in apod:
        photo_url = apod['url']
        title = apod['title']
        await message.answer_photo(photo=photo_url, caption=f"{title}")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç NASA.")

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞ ---
async def set_commands(bot: Bot):
    commands = [
        types.BotCommand(command="/start", description="–ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"),
        types.BotCommand(command="/links", description="–ö–Ω–æ–ø–∫–∏ —Å URL-—Å—Å—ã–ª–∫–∞–º–∏"),
        types.BotCommand(command="/dynamic", description="–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é"),
        types.BotCommand(command="/add", description="–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞"),
        types.BotCommand(command="/students", description="–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤"),
        types.BotCommand(command="/cat", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä–æ–¥–µ –∫–æ—à–∫–∏"),
        types.BotCommand(command="/random_apod", description="–°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç NASA")
    ]
    await bot.set_my_commands(commands)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await set_commands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())